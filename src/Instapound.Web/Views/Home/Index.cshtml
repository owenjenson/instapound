@model List<PostViewModel>

@{
    ViewData["Title"] = "Instapound";
}

<ul id="mainList" class="flex flex-col gap-7">
    @foreach (var post in Model)
    {
        <li>
            @await Html.PartialAsync("_PostListItem", post)
        </li>
    }
</ul>

<div id="endOfListElement" class="grid place-content-center pt-10">
    <svg class="animate-spin h-5 w-5 text-on-surface" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
</div>

@* Infinite loading... *@

@section Scripts {
    <script>
        let isLoadingNextItems = false;

        window.addEventListener('load', () => {
            const observer = new IntersectionObserver(
                async (entries) => {
                    if (entries[0].isIntersecting && !isLoadingNextItems) {
                        await load();
                    }
                },
                { threshold: 0 }
            );

            observer.observe(document.getElementById('endOfListElement'));
        });

        async function load() {
            isLoadingNextItems = true;

            const urlParams = new URLSearchParams(window.location.search);
            const paramPage = +urlParams.get('page');
            let page = isNaN(paramPage) ? 0 : paramPage;

            page++;

            history.replaceState(null, '', `?page=${page}`);

            try {
                const response = await fetch(`/Home/NextPosts?page=${page}`);
                const result = await response.text();

                document.getElementById('mainList').innerHTML += result;

                if (updateConfirmation) {
                    updateConfirmation();
                }
                if (updateAjaxButtons) {
                    updateAjaxButtons();
                }
            }
            catch (err) {
                console.error(err);
            }

            isLoadingNextItems = false;
        }
    </script>
}